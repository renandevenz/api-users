/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.br.users.apiusers.api.openapi.api;

import com.br.users.apiusers.api.openapi.model.DadosUsuarioRequest;
import com.br.users.apiusers.api.openapi.model.DadosUsuarioResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-04-13T15:48:14.209762500-03:00[America/Sao_Paulo]")
@Validated
@Api(value = "users", description = "the users API")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /users/v1/buscarPorNome : Método para buscar usuário por nome.
     *
     * @param nome Nome do usuário. (required)
     * @return Response entity. (status code 200)
     */
    @ApiOperation(value = "Método para buscar usuário por nome.", nickname = "buscar", notes = "", response = DadosUsuarioResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Response entity.", response = DadosUsuarioResponse.class) })
    @GetMapping(
        value = "/users/v1/buscarPorNome",
        produces = { "application/json" }
    )
    default ResponseEntity<DadosUsuarioResponse> buscar(@ApiParam(value = "Nome do usuário." ,required=true) @RequestHeader(value="nome", required=true) String nome) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"nome\" : \"renan\", \"email\" : \"teste@teste.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/v1/buscarTodos : Método de busca de usuários.
     *
     * @return Lista. (status code 200)
     */
    @ApiOperation(value = "Método de busca de usuários.", nickname = "buscarTodos", notes = "", response = DadosUsuarioResponse.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Lista.", response = DadosUsuarioResponse.class, responseContainer = "List") })
    @GetMapping(
        value = "/users/v1/buscarTodos",
        produces = { "application/json" }
    )
    default ResponseEntity<List<DadosUsuarioResponse>> buscarTodos() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"nome\" : \"some text\", \"email\" : \"some text\" }, { \"nome\" : \"some text\", \"email\" : \"some text\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /users/v1/cadastrar
     *
     * @param dadosUsuarioRequest  (required)
     * @return Criação. (status code 201)
     */
    @ApiOperation(value = "", nickname = "salvar", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Criação.") })
    @PostMapping(
        value = "/users/v1/cadastrar",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> salvar(@ApiParam(value = "" ,required=true )  @Valid @RequestBody DadosUsuarioRequest dadosUsuarioRequest) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
